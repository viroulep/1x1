{"version":3,"sources":["logic/state.js","components/Teams.js","components/HistoryContent.js","components/History.js","logic/pairings.js","logic/serialization.js","components/CreatePairings.js","components/LoadJson.js","components/Landing.js","App.js","reportWebVitals.js","index.js"],"names":["stateUpdater","state","action","type","data","history","name","teamId","teams","people","map","p","active","Error","useStyles","makeStyles","theme","root","display","flexDirection","Teams","updateState","classes","className","Accordion","AccordionSummary","Typography","variant","AccordionDetails","Grid","container","spacing","Object","values","team","item","xs","sm","md","Card","CardContent","gutterBottom","component","List","dense","ListItem","role","undefined","button","onClick","participate","ListItemIcon","Checkbox","edge","checked","disabled","ListItemText","primary","pairing","padding","stringForTeam","t","Pair","a","b","HistoryContent","peopleToTeam","date","pairings","unpaired","Date","toUTCString","Paper","square","length","join","History","DefaultMap","defaultFunction","entries","default","key","this","has","Map","createPairings","candidates","newCandidatesPerPerson","historyPerPerson","Set","forEach","push","get","add","set","filter","c","peopleSet","markCandidate","delete","sort","sizeA","size","sizeB","diff","currentCandidate","shift","potentialMatches","low","high","match","Math","floor","random","splice","indexOf","toJSON","loadStateFromJson","json","entry","CreatePairings","useState","setPairings","changed","setChanged","pairingInHistory","findIndex","downloadAction","useCallback","JSON","stringify","cleanedUp","id","jsonFromState","blob","Blob","blobURL","window","URL","createObjectURL","tmp","document","createElement","href","setAttribute","body","appendChild","click","direction","Button","color","LoadJson","fileInput","useRef","onFileSelected","ev","reader","FileReader","onload","e","parse","target","result","readAsText","files","current","ref","accept","style","onChange","height","marginTop","grow","flexGrow","Landing","useReducer","CssBaseline","Container","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.565a0b0b.chunk.js","sourcesContent":["// Fed to useReducer, update the react state based on the action.\nexport const stateUpdater = (state, action) => {\n  const { type, data } = action;\n  switch (type) {\n    case 'setState':\n      return data;\n    case 'addHistory':\n      return {\n        ...state,\n        history: [data, ...state.history],\n      };\n    case 'toggleActive':\n      const { name, teamId } = data;\n      // FIXME: if more person updates are needed, it would be nice to have a\n      // helper with a callback with the actions to make on the person.\n      return {\n        ...state,\n        teams: {\n          ...state.teams,\n          [teamId]: {\n            ...state.teams[teamId],\n            people: state.teams[teamId].people.map((p) => {\n              if (p.name === name) {\n                p.active = !p.active;\n              }\n              return {\n                ...p,\n              };\n            }),\n          },\n        },\n      };\n    default:\n      throw new Error();\n  }\n};\n","import React from 'react';\n\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Grid,\n  Card,\n  CardContent,\n  Typography,\n  List,\n  ListItem,\n  ListItemIcon,\n  Checkbox,\n  ListItemText,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n}));\n\nconst Teams = ({ state, updateState }) => {\n  const { teams } = state;\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <Accordion>\n        <AccordionSummary>\n          <Typography variant=\"h2\">Teams</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Grid container spacing={2}>\n            {Object.values(teams).map((team) => (\n              <Grid item key={team.name} xs={12} sm={4} md={3}>\n                <Card variant=\"outlined\">\n                  <CardContent>\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                      {team.name}\n                    </Typography>\n                    <List dense>\n                      {team.people.map((p) => (\n                        <ListItem\n                          key={p.name}\n                          role={undefined}\n                          button\n                          onClick={() =>\n                            p.participate &&\n                            updateState({\n                              type: 'toggleActive',\n                              data: { name: p.name, teamId: team.name },\n                            })\n                          }\n                        >\n                          <ListItemIcon>\n                            <Checkbox\n                              edge=\"start\"\n                              checked={p.active}\n                              disabled={!p.participate}\n                            />\n                          </ListItemIcon>\n                          <ListItemText primary={p.name} />\n                        </ListItem>\n                      ))}\n                    </List>\n                  </CardContent>\n                </Card>\n              </Grid>\n            ))}\n          </Grid>\n        </AccordionDetails>\n      </Accordion>\n    </div>\n  );\n};\n/*j\n */\n\nexport default Teams;\n","import { Grid, Typography, Paper } from '@material-ui/core';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  pairing: {\n    padding: theme.spacing(2),\n  },\n}));\n\nconst stringForTeam = (t) => (t ? ` from team ${t}` : '');\n\nconst Pair = ({ map, a, b }) => (\n  <div>\n    {a}\n    {stringForTeam(map[a])}, with {b}\n    {stringForTeam(map[b])}\n  </div>\n);\n\nconst HistoryContent = ({ history, peopleToTeam }) => {\n  const classes = useStyles();\n  return (\n    <Grid container spacing={2}>\n      {history.map(({ date, pairings, unpaired }) => (\n        <Grid item key={date} xs={12}>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            Pairing on {new Date(date).toUTCString()}\n          </Typography>\n          <Paper variant=\"outlined\" square className={classes.pairing}>\n            <Typography variant=\"body2\" component=\"div\">\n              {pairings.map(([a, b]) => (\n                <Pair key={`${a}-${b}`} a={a} b={b} map={peopleToTeam} />\n              ))}\n              {unpaired.length > 0 && (\n                <div>Not paired: {unpaired.join(', ')}</div>\n              )}\n            </Typography>\n          </Paper>\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n\nexport default HistoryContent;\n","import React from 'react';\n\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Typography,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport HistoryContent from './HistoryContent';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  pairing: {\n    padding: theme.spacing(2),\n  },\n}));\n\nconst History = ({ state }) => {\n  const classes = useStyles();\n  const { history, peopleToTeam } = state;\n  return (\n    <div className={classes.root}>\n      <Accordion>\n        <AccordionSummary>\n          <Typography variant=\"h2\">History</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <HistoryContent history={history} peopleToTeam={peopleToTeam} />\n        </AccordionDetails>\n      </Accordion>\n    </div>\n  );\n};\n\nexport default History;\n","// Return an int in [low, high[\nconst randomInt = (low, high) => Math.floor(Math.random() * (high - low) + low);\n\nclass DefaultMap extends Map {\n  get(key) {\n    if (!this.has(key)) super.set(key, this.default());\n    return super.get(key);\n  }\n\n  constructor(defaultFunction, entries) {\n    super(entries);\n    this.default = defaultFunction;\n  }\n}\n\nexport const createPairings = (teams, peopleToTeam, history) => {\n  const candidates = [];\n  const newCandidatesPerPerson = new Map();\n  const historyPerPerson = new DefaultMap(() => new Set());\n\n  // Gather candidates to mix and match\n  Object.values(teams).forEach(({ people }) => {\n    people.forEach(({ name, active }) => {\n      if (active) {\n        candidates.push(name);\n      }\n    });\n  });\n\n  // Build history per person\n  history.forEach(({ pairings }) => {\n    pairings.forEach(([a, b]) => {\n      historyPerPerson.get(a).add(b);\n      historyPerPerson.get(b).add(a);\n    });\n  });\n\n  // Compute legal *new* candidates per person\n  // This is a bit expensive as we will maintain this as we create pairs,\n  // however this is a fairly straightforward way of figuring out who has the\n  // most constraints and making sure we don't end up with multiple people\n  // of the same team unassigned.\n  candidates.forEach((name) => {\n    newCandidatesPerPerson.set(\n      name,\n      new Set(\n        [...candidates].filter((c) => {\n          return (\n            !historyPerPerson.get(name).has(c) &&\n            !teams[peopleToTeam[name]].peopleSet.has(c)\n          );\n        })\n      )\n    );\n  });\n\n  const pairings = [];\n  const unpaired = [];\n  const markCandidate = (c) => {\n    for (const persons of newCandidatesPerPerson.values()) {\n      persons.delete(c);\n    }\n  };\n\n  while (candidates.length !== 0) {\n    // Sort candidates by available candidates, lowest first.\n    // Do it each time, because new pairs affect the sort!\n    candidates.sort((a, b) => {\n      // If one of them has size 0, we should actually reverse the value:\n      // we want people without new candidates to be handled last, as this\n      // means they have a softer constraint.\n      const sizeA = newCandidatesPerPerson.get(a).size;\n      const sizeB = newCandidatesPerPerson.get(b).size;\n      let diff = sizeA - sizeB;\n      if (!sizeA || !sizeB) diff = -diff;\n      return diff;\n    });\n\n    const currentCandidate = candidates.shift();\n\n    // Remove current candidate from potential candidates for everyone.\n    markCandidate(currentCandidate);\n\n    // Compute potential matches: take new candidates if any, otherwise\n    // fallback to any candidates not in the same team.\n    const potentialMatches = newCandidatesPerPerson.get(currentCandidate).size\n      ? [...newCandidatesPerPerson.get(currentCandidate)]\n      : candidates.filter((c) => historyPerPerson.get(currentCandidate).has(c));\n\n    if (potentialMatches.length === 0) {\n      // Damn, just give up :(\n      unpaired.push(currentCandidate);\n      continue;\n    }\n\n    // Pick a random potential match, create the pair, and perform some cleanup\n    // before going to next candidate.\n    const match = potentialMatches[randomInt(0, potentialMatches.length)];\n    markCandidate(match);\n    pairings.push([currentCandidate, match]);\n    candidates.splice(candidates.indexOf(match), 1);\n  }\n\n  return {\n    date: new Date().toJSON(),\n    pairings,\n    unpaired,\n  };\n};\n","export const loadStateFromJson = (json) => {\n  const state = {\n    ...json,\n  };\n  // Compute it now, will be useful later.\n  const peopleToTeam = {};\n\n  // The rest is pretty much a direct match, we just want to add the \"active\"\n  // state to all people.\n  Object.entries(state.teams).forEach((entry) => {\n    const [, team] = entry;\n    team.people.forEach((p) => {\n      p.active = p.participate;\n      peopleToTeam[p.name] = team.name;\n    });\n    team.peopleSet = new Set(team.people.map(({ name }) => name));\n  });\n  state.peopleToTeam = peopleToTeam;\n  return state;\n};\n\nexport const jsonFromState = (state) => {\n  const cleanedUp = {\n    teams: {},\n    history: state.history,\n  };\n  for (const [id, { name, people }] of Object.entries(state.teams)) {\n    cleanedUp.teams[id] = {\n      name,\n      people: people.map(({ name, participate }) => ({ name, participate })),\n    };\n  }\n  return cleanedUp;\n};\n","import React, { useState, useCallback } from 'react';\n\nimport { Button, Card, CardContent, Grid, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport HistoryContent from './HistoryContent';\nimport { createPairings } from '../logic/pairings';\nimport { jsonFromState } from '../logic/serialization';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n}));\n\nconst CreatePairings = ({ state, updateState }) => {\n  const classes = useStyles();\n\n  const { teams, history, peopleToTeam } = state;\n\n  const [pairings, setPairings] = useState(null);\n  const [changed, setChanged] = useState(false);\n  const pairingInHistory = pairings\n    ? history.findIndex(({ date }) => date === pairings.date) !== -1\n    : false;\n\n  const downloadAction = useCallback(() => {\n    const json = JSON.stringify(jsonFromState(state), null, 2);\n    const blob = new Blob([json], {\n      type: 'application/json',\n    });\n    const blobURL = window.URL.createObjectURL(blob);\n    const tmp = document.createElement('a');\n    tmp.href = blobURL;\n    tmp.setAttribute('download', '1x1-data.json');\n    document.body.appendChild(tmp);\n    tmp.click();\n  }, [state]);\n\n  return (\n    <div className={classes.root}>\n      <Card>\n        <CardContent>\n          <Typography variant=\"h2\">Create new pairings</Typography>\n          <Grid container direction=\"column\" spacing={2}>\n            <Grid item>\n              <Typography variant=\"body1\" component=\"div\">\n                <ol>\n                  <li>\n                    Go to the \"teams\" section and unselect the person\n                    unavailable.\n                  </li>\n                  <li>Create the pairings by clicking the button below</li>\n                  <li>\n                    If you are not happy about them, go back to step 2,\n                    otherwise proceed with the next step.\n                  </li>\n                  <li>Copy paste them in a new draft email.</li>\n                  <li>Add them to history by clicking the button below.</li>\n                  <li>\n                    Download the data, and keep them to generate the next\n                    pairings.\n                  </li>\n                </ol>\n              </Typography>\n            </Grid>\n            <Grid container item spacing={2}>\n              <Grid item>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={() =>\n                    setPairings(createPairings(teams, peopleToTeam, history))\n                  }\n                >\n                  Create the pairings\n                </Button>\n              </Grid>\n              <Grid item>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  disabled={!pairings || pairingInHistory}\n                  onClick={() => {\n                    updateState({ type: 'addHistory', data: pairings });\n                    setChanged(true);\n                  }}\n                >\n                  Add to history\n                </Button>\n              </Grid>\n              <Grid item>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  disabled={!changed}\n                  onClick={downloadAction}\n                >\n                  Download the data\n                </Button>\n              </Grid>\n            </Grid>\n            <Grid item>\n              {pairings && (\n                <HistoryContent\n                  peopleToTeam={peopleToTeam}\n                  history={[pairings]}\n                />\n              )}\n            </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default CreatePairings;\n","import React, { useRef, useCallback } from 'react';\n\nimport { Button, Card, CardContent, Typography } from '@material-ui/core';\n\nimport { loadStateFromJson } from '../logic/serialization';\n\nconst LoadJson = ({ updateState }) => {\n  const fileInput = useRef(null);\n  const onFileSelected = useCallback(\n    (ev, fileInput) => {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        updateState({\n          type: 'setState',\n          data: loadStateFromJson(JSON.parse(e.target.result)),\n        });\n      };\n      reader.readAsText(ev.target.files[0]);\n    },\n    [updateState]\n  );\n  return (\n    <Card>\n      <CardContent>\n        <Typography variant=\"h2\">1x1</Typography>\n        <Typography variant=\"body1\">\n          Click the button below to upload a JSON describing the teams and the\n          pairing history.\n        </Typography>\n        <div>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => fileInput.current.click()}\n          >\n            Upload JSON\n          </Button>\n        </div>\n        <input\n          type=\"file\"\n          ref={fileInput}\n          accept=\".json\"\n          style={{ display: 'none' }}\n          onChange={(ev) => onFileSelected(ev, fileInput)}\n        />\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default LoadJson;\n","import React, { useReducer } from 'react';\n\nimport { Grid, Container, CssBaseline } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { stateUpdater } from '../logic/state';\n\nimport Teams from './Teams';\nimport History from './History';\nimport CreatePairings from './CreatePairings';\nimport LoadJson from './LoadJson';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    height: '100vh',\n    flexDirection: 'column',\n    marginTop: theme.spacing(2),\n  },\n  grow: {\n    flexGrow: 1,\n  },\n}));\n\n// TODO: setup the imported state and provide it\nconst Landing = () => {\n  const classes = useStyles();\n  const [state, updateState] = useReducer(stateUpdater, null);\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <Container>\n        {state ? (\n          <Grid container direction=\"column\" spacing={2}>\n            <Grid item>\n              <CreatePairings state={state} updateState={updateState} />\n            </Grid>\n            <Grid item>\n              <Teams state={state} updateState={updateState} />\n            </Grid>\n            <Grid item>\n              <History state={state} />\n            </Grid>\n          </Grid>\n        ) : (\n          <LoadJson updateState={updateState} />\n        )}\n      </Container>\n    </div>\n  );\n};\n\nexport default Landing;\n","import './App.css';\nimport 'fontsource-roboto';\n\nimport Landing from './components/Landing';\n\nfunction App() {\n  return <Landing />;\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}